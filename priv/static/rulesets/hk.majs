set display_name, "Hong Kong Old Style"
set tutorial_link, "https://github.com/EpicOrange/riichi_advanced/blob/main/documentation/hk.md"
set wall, ["1m", "1m", "1m", "1m",
           "2m", "2m", "2m", "2m",
           "3m", "3m", "3m", "3m",
           "4m", "4m", "4m", "4m",
           "5m", "5m", "5m", "5m",
           "6m", "6m", "6m", "6m",
           "7m", "7m", "7m", "7m",
           "8m", "8m", "8m", "8m",
           "9m", "9m", "9m", "9m",
           "1p", "1p", "1p", "1p",
           "2p", "2p", "2p", "2p",
           "3p", "3p", "3p", "3p",
           "4p", "4p", "4p", "4p",
           "5p", "5p", "5p", "5p",
           "6p", "6p", "6p", "6p",
           "7p", "7p", "7p", "7p",
           "8p", "8p", "8p", "8p",
           "9p", "9p", "9p", "9p",
           "1s", "1s", "1s", "1s",
           "2s", "2s", "2s", "2s",
           "3s", "3s", "3s", "3s",
           "4s", "4s", "4s", "4s",
           "5s", "5s", "5s", "5s",
           "6s", "6s", "6s", "6s",
           "7s", "7s", "7s", "7s",
           "8s", "8s", "8s", "8s",
           "9s", "9s", "9s", "9s",
           "1z", "1z", "1z", "1z",
           "2z", "2z", "2z", "2z",
           "3z", "3z", "3z", "3z",
           "4z", "4z", "4z", "4z",
           "0z", "0z", "0z", "0z",
           "6z", "6z", "6z", "6z",
           "7z", "7z", "7z", "7z",
           "1f", "2f", "3f", "4f",
           "1g", "2g", "3g", "4g"]

define_set pair, ~s"0 0"
define_set shuntsu, ~s"0 1 2"
define_set koutsu, ~s"0 0 0"
define_set mentsu, ~s"0 0 0 | 0 1 2"
define_set quad, ~s"0 0 0 0"
define_set taatsu, ~s"0 0 | 0 1 | 0 2"
define_set ton, ~s"1z 1z 1z"
define_set nan, ~s"2z 2z 2z"
define_set shaa, ~s"3z 3z 3z"
define_set pei, ~s"4z 4z 4z"
define_set haku, ~s"5z 5z 5z"
define_set hatsu, ~s"6z 6z 6z"
define_set chun, ~s"7z 7z 7z"
define_set ton_pair, ~s"1z 1z"
define_set nan_pair, ~s"2z 2z"
define_set shaa_pair, ~s"3z 3z"
define_set pei_pair, ~s"4z 4z"
define_set haku_pair, ~s"5z 5z"
define_set hatsu_pair, ~s"6z 6z"
define_set chun_pair, ~s"7z 7z"
define_set orphans_all, ~s"1m 9m 1p 9p 1s 9s 1z 2z 3z 4z 5z 6z 7z"
define_set orphans_any, ~s"1m|9m|1p|9p|1s|9s|1z|2z|3z|4z|5z|6z|7z"
define_set chuurenpoutou, ~s"0 0 0 1 2 3 4 5 6 7 8 8 8"

# the instances of any:1 are for minefield,
# which assumes that tenpai specifies exactly 13 tiles
define_match standard_tenpai, ~m"exhaustive, mentsu:3, taatsu:1, pair:1 | exhaustive, mentsu:4, any:1"
define_match kokushi_tenpai, ~m"unique, dismantle_calls, orphans_any:12, orphans_any:1"
define_match tenpai, "standard_tenpai", "chiitoitsu_tenpai", "kokushi_tenpai"

define_match standard_win, ~m"exhaustive, mentsu:4, pair:1"
define_match kokushi_win, ~m"unique, dismantle_calls, orphans_any:13, orphans_any:1"
define_match win, "standard_win", "chiitoitsu_win", "kokushi_win"

define_match suuankou_tsumo, ~m"(pon daiminkan kakan):-1, koutsu:4, pair:1"
define_match suuankou_ron, ~m"exhaustive, (pon daiminkan kakan):-1, koutsu:4, (any@winning_tile):0, pair:1"

define_const closed_hand, has_no_call_named("chii", "pon", "daiminkan", "kakan")

# Flowers
define_yaku yaku, "No Flowers", 1, not_match(["flowers"], ~m"unique, (1f 2f 3f 4f 1g 2g 3g 4g):1")
define_yaku yaku, "Seat Flower", 1, seat_is("east") and match(["flowers"], ~m"1f:1")
define_yaku yaku, "Seat Flower", 1, seat_is("south") and match(["flowers"], ~m"2f:1")
define_yaku yaku, "Seat Flower", 1, seat_is("west") and match(["flowers"], ~m"3f:1")
define_yaku yaku, "Seat Flower", 1, seat_is("north") and match(["flowers"], ~m"4f:1")
define_yaku yaku, "Seat Season", 1, seat_is("east") and match(["flowers"], ~m"1g:1")
define_yaku yaku, "Seat Season", 1, seat_is("south") and match(["flowers"], ~m"2g:1")
define_yaku yaku, "Seat Season", 1, seat_is("west") and match(["flowers"], ~m"3g:1")
define_yaku yaku, "Seat Season", 1, seat_is("north") and match(["flowers"], ~m"4g:1")
define_yaku yaku, "All Flowers", 2, match(["flowers"], ~m"unique, (1f 2f 3f 4f):4")
define_yaku yaku, "All Seasons", 2, match(["flowers"], ~m"unique, (1g 2g 3g 4g):4")
define_yaku yaku, "Seven Flowers", 3, match(["flowers"], ~m"unique, (1f 2f 3f 4f 1g 2g 3g 4g):7")
define_yaku yaku, "Eight Flowers", 8, match(["flowers"], ~m"unique, (1f 2f 3f 4f 1g 2g 3g 4g):8")
# Winning methods
define_yaku yaku, "Self Draw", 1, won_by_draw
define_yaku yaku, "Concealed Hand", 1, @closed_hand
define_yaku yaku, "Concealed Hand", 1, @closed_hand
define_yaku yaku, "Final Tile", 1, no_tiles_remaining
define_yaku yaku, "After a Kong", 1, status("kan")
define_yaku yaku, "After Multiple Kongs", 8, status("double_kan")
define_yaku yaku, "Robbing a Kong", 1, won_by_call
# Suit-based hands
define_yaku yaku, "Half Flush", 3,
     winning_hand_consists_of("1m","2m","3m","4m","5m","6m","7m","8m","9m","1z","2z","3z","4z","0z","6z","7z")
  or winning_hand_consists_of("1p","2p","3p","4p","5p","6p","7p","8p","9p","1z","2z","3z","4z","0z","6z","7z")
  or winning_hand_consists_of("1s","2s","3s","4s","5s","6s","7s","8s","9s","1z","2z","3z","4z","0z","6z","7z")
define_yaku yaku, "Full Flush", 7,
     winning_hand_consists_of("1m","2m","3m","4m","5m","6m","7m","8m","9m")
  or winning_hand_consists_of("1p","2p","3p","4p","5p","6p","7p","8p","9p")
  or winning_hand_consists_of("1s","2s","3s","4s","5s","6s","7s","8s","9s")
define_yaku yaku, "White Dragon", 1, match(["hand", "calls", "winning_tile"], ~m"exhaustive, haku:1, mentsu:3, pair:1")
define_yaku yaku, "Green Dragon", 1, match(["hand", "calls", "winning_tile"], ~m"exhaustive, hatsu:1, mentsu:3, pair:1")
define_yaku yaku, "Red Dragon", 1, match(["hand", "calls", "winning_tile"], ~m"exhaustive, chun:1, mentsu:3, pair:1")

# prevalent and seat winds
def add_scoring_attrs do
  if round_wind_is("east") do add_attr(["hand", "calls", "winning_tile"], ["_prevalent"], ["1z"]) end
  if round_wind_is("south") do add_attr(["hand", "calls", "winning_tile"], ["_prevalent"], ["2z"]) end
  if round_wind_is("west") do add_attr(["hand", "calls", "winning_tile"], ["_prevalent"], ["3z"]) end
  if round_wind_is("north") do add_attr(["hand", "calls", "winning_tile"], ["_prevalent"], ["4z"]) end
  if seat_is("east") do add_attr(["hand", "calls", "winning_tile"], ["_seat"], ["1z"]) end
  if seat_is("south") do add_attr(["hand", "calls", "winning_tile"], ["_seat"], ["2z"]) end
  if seat_is("west") do add_attr(["hand", "calls", "winning_tile"], ["_seat"], ["3z"]) end
  if seat_is("north") do add_attr(["hand", "calls", "winning_tile"], ["_seat"], ["4z"]) end
end
define_set prevalent_wind, ~s"0@prevalent 0@prevalent 0@prevalent"
define_set seat_wind, ~s"0@seat 0@seat 0@seat"
define_yaku yaku, "Round Wind", 1, match(["hand", "calls", "winning_tile"], ~m"exhaustive, prevalent_wind:1, mentsu:3, pair:1")
define_yaku yaku, "Seat Wind", 1, match(["hand", "calls", "winning_tile"], ~m"exhaustive, seat_wind:1, mentsu:3, pair:1")

define_yaku yaku, "Small Three Dragons", 5, match(["hand", "calls", "winning_tile"], ~m"unique, (haku hatsu chun):2, (haku_pair hatsu_pair chun_pair):1")
define_yaku yaku, "Big Three Dragons", 8, match(["hand", "calls", "winning_tile"], ~m"unique, (haku hatsu chun):3")
define_yaku yaku, "Small Four Winds", 6, match(["hand", "calls", "winning_tile"], ~m"unique, (ton nan shaa pei):3, (ton_pair nan_pair shaa_pair pei_paie):1")
define_yaku yaku, "Big Four Winds", 13, match(["hand", "calls", "winning_tile"], ~m"unique, (ton nan shaa pei):4")
define_yaku yaku, "All Honours", 10, winning_hand_consists_of("1z","2z","3z","4z","0z","6z","7z")
# Triplet hands
define_yaku yaku, "All Triplets", 3, match(["hand", "calls", "winning_tile"], ~m"koutsu:4, pair:1")
define_yaku yakuman, "Four Concealed Triplets", 8,
     (won_by_draw and match(["hand", "calls", "winning_tile"], ["suuankou_tsumo"]))
  or (not_won_by_draw and match(["hand", "calls", "winning_tile"], ["suuankou_ron"]))

define_yaku yaku, "Mixed Terminals", 4, winning_hand_consists_of("1m","9m","1p","9p","1s","9s","1z","2z","3z","4z","0z","6z","7z")
define_yaku yakuman, "All Terminals", 13, winning_hand_consists_of("1m","9m","1p","9p","1s","9s")
define_yaku yakuman, "Four Kongs", 13, match(["calls"], ~m"(daiminkan ankan kakan):4")
# Sequence hands
define_yaku yaku, "All Sequences", 1, match(["hand", "calls", "winning_tile"], ~m"exhaustive, shuntsu:4, pair:1")
define_yaku yaku, "Thirteen Orphans", 13, match(["hand", "winning_tile"], ~m"orphans_all:1")
define_yaku yaku, "Nine Gates", 13, match(["hand", "winning_tile"], ~m"chuurenpoutou:1")
define_yaku yaku, "Blessing of Heaven", 13, status("first_turn") and won_by_draw
define_yaku yaku, "Blessing of Earth", 13, everyone_status("first_turn") and won_by_discard
define_yaku yaku, "Blessing of Man", 13, status("first_turn") and won_by_discard

define_yaku_precedence "All Flowers", ["Seat Flower"]
define_yaku_precedence "All Seasons", ["Seat Season"]
define_yaku_precedence "Seven Flowers", ["All Flowers", "All Seasons"]
define_yaku_precedence "Eight Flowers", ["Seven Flowers"]
define_yaku_precedence "After Multiple Kongs", ["After a Kong"]
define_yaku_precedence "Full Flush", ["Half Flush"]
define_yaku_precedence "Big Four Winds", ["Small Four Winds"]
define_yaku_precedence "Big Three Dragons", ["Small Three Dragons"]
define_yaku_precedence "Blessing of Earth", ["Blessing of Man"]
define_yaku_precedence "Four Concealed Triplets", ["All Triplets"]
define_yaku_precedence "All Honours", ["Round Wind", "Seat Wind", "All Triplets", "Half Flush", "Mixed Terminals"]

set score_calculation, %{
  scoring_method: "score_table",
  score_table: %{"0": 1, "1": 2, "2": 4, "3": 8, "4": 16, "5": 24, "6": 32, "7": 48, "8": 64, "9": 96, "10": 128, "11": 192, "12": 256, "max": 384},
  discarder_multiplier: 2,
  non_discarder_multiplier: 0,
  self_draw_multiplier: 1,
  yaku_lists: ["yaku"],
  agarirenchan: true,
  point_name: "Fan",
  win_by_discard_label: "Hu",
  win_by_draw_label: "Zimo",
  win_by_discard_name: "Hu",
  win_by_discard_name_2: "Double Hu",
  win_by_discard_name_3: "Triple Hu",
  win_by_draw_name: "Zimo",
  exhaustive_draw_name: "Draw"
}

define play_restriction, "flower", true


on before_turn_change do
  unset_status("kan", "double_kan")
  if status_missing("match_start") do
    unset_status("first_turn")
  end
end

on after_turn_change do
  if no_tiles_remaining do
    pause(1000)
    ryuukyoku
  else
    if status_missing("match_start") do
      draw
    end
  end
  if everyone_status("no_flowers") do
    unset_status_all("no_flowers", "match_start")
    change_turn("east")
  end
end

on after_call do
  if match(["last_call"], ~m"(haku hatsu chun):1") and match("calls", ~m"haku:1, hatsu:1, chun:1") do
    as callee do
      set_status("pao")
    end
  end
  if match(["last_call"], ~m"(ton nan shaa pei):1") and match("calls", ~m"ton:1, nan:1, shaa:1, pei:1") do
    as callee do
      set_status("pao")
    end
  end
end

on after_start do
  set_status_all("first_turn", "match_start")
end


define_button start_flower,
  display_name: "Reveal flower", 
  show_when: status("match_start")
    and our_turn
    and match(["hand", "draw"], ~m"nojoker, (1f 2f 3f 4f 1g 2g 3g 4g):1"),
  unskippable: true
  do
    big_text("Flower")
    flower("1f", "2f", "3f", "4f", "1g", "2g", "3g", "4g")
    draw(1, "opposite_end")
  end

define_button start_no_flower,
  display_name: "No flowers", 
  show_when: status("match_start")
    and our_turn
    and not_match(["hand", "draw"], ~m"nojoker, (1f 2f 3f 4f 1g 2g 3g 4g):1"),
  unskippable: true
  do
    big_text("No Flowers")
    set_status("no_flowers")
    advance_turn
    recalculate_buttons
  end

define_button chii,
  display_name: "Chow", 
  show_when: status_missing("match_start")
    and not_our_turn
    and not_no_tiles_remaining
    and kamicha_discarded
    and call_available,
  call: [[-2, -1], [-1, 1], [1, 2]]
  do
    big_text("Chow")
    call
    change_turn("self")
  end

define_button pon,
  display_name: "Pong", 
  show_when: status_missing("match_start")
    and not_our_turn
    and not_no_tiles_remaining
    and someone_else_just_discarded
    and call_available,
  precedence_over: ["chii"],
  call: [[0, 0]]
  do
    big_text("Pong")
    call
    change_turn("self")
  end

define_button daiminkan,
  display_name: "Kong", 
  show_when: status_missing("match_start")
    and not_our_turn
    and not_no_tiles_remaining
    and someone_else_just_discarded
    and call_available,
  precedence_over: ["chii", "pon"],
  call: [[0, 0, 0]]
  do
    big_text("Kong")
    call
    change_turn("self")
    if status("kan") do
      set_status("double_kan")
    end
    set_status("kan")
    draw(1, "opposite_end")
  end

define_button ankan,
  display_name: "Self Kong", 
  show_when: status_missing("match_start")
    and our_turn
    and not_no_tiles_remaining
    and has_draw
    and self_call_available,
  call: [[0, 0, 0]]
  do
    big_text("Kong")
    self_call
    if status("kan") do
      set_status("double_kan")
    end
    set_status("kan")
    draw(1, "opposite_end")
  end

define_button kakan,
  display_name: "Kong", 
  show_when: status_missing("match_start")
    and our_turn
    and not_no_tiles_remaining
    and has_draw
    and can_upgrade_call,
  call: [[0, 0, 0]]
  do
    big_text("Kong")
    upgrade_call
    if status("kan") do
      set_status("double_kan")
    end
    set_status("kan")
    draw(1, "opposite_end")
  end

define_button ron,
  display_name: "Hu", 
  show_when: status_missing("match_start")
    and not_our_turn
    and someone_else_just_discarded
    and match(["hand", "calls"], ["tenpai"])
    and match(["hand", "calls", "last_discard"], ["win"]),
  precedence_over: ["chii", "pon", "daiminkan"]
  do
    big_text("Hu")
    pause(1000)
    reveal_hand
    win_by_discard
  end

define_button chankan,
  display_name: "Hu", 
  show_when: status_missing("match_start")
    and not_our_turn
    and ((last_call_is("kakan") and match(["hand", "calls", "last_called_tile"], ["win"]))
     or (last_call_is("ankan") and match(["hand", "calls"], ["kokushi_tenpai"]) and match(["hand", "calls", "last_called_tile"], ["win"]))),
  precedence_over: ["chii", "pon", "daiminkan"]
  do
    big_text("Hu")
    pause(1000)
    reveal_hand
    win_by_call
  end

define_button tsumo,
  display_name: "Zimo", 
  show_when: status_missing("match_start")
    and our_turn
    and match(["hand", "calls", "draw"], ["tenpai"])
    and match(["hand", "calls", "draw"], ["win"])
  do
    big_text("Zimo")
    pause(1000)
    reveal_hand
    win_by_draw
  end

define_button flower,
  display_name: "Flower", 
  show_when: status_missing("match_start")
    and our_turn
    and has_draw
    and not_just_discarded
    and match(["hand", "draw"], ~m"nojoker, (1f 2f 3f 4f 1g 2g 3g 4g):1"),
  unskippable: true
  do
    big_text("Flower")
    flower("1f", "2f", "3f", "4f", "1g", "2g", "3g", "4g")
    set_status("flower")
    if no_tiles_remaining do
      advance_turn
    else
      draw(1, "opposite_end")
    end
  end


define_auto_button _1_auto_sort,
  display_name: "A",
  desc: "Automatically sort your hand.",
  enabled_at_start: true
  do
    sort_hand
  end

define_auto_button _2_auto_ron,
  display_name: "R",
  desc: "Automatically declare wins."
  do
    if buttons_include("ron") do
      press_button("ron")
    end
    if buttons_include("tsumo") do
      press_button("tsumo")
    end
  end

define_auto_button _3_auto_no_call,
  display_name: "C",
  desc: "Skip all calls except wins."
  do
    if not_our_turn and buttons_include("skip") and buttons_exclude("ron", "chankan") do
      press_button("skip")
    end
  end

define_auto_button _4_auto_discard,
  display_name: "D",
  desc: "Automatically discard your drawn tile."
  do
    if our_turn and buttons_exclude("tsumo", "ankan") and has_draw do
      discard_draw
    end
  end

define_auto_button _5_auto_flower,
  display_name: "F",
  desc: "Automatically declare all flowers.",
  enabled_at_start: true
  do
    if buttons_include("start_flower") do
      press_button("start_flower")
      press_first_call_button("start_flower")
    end
    if buttons_include("start_no_flower") do
      press_button("start_no_flower")
    end
    if buttons_include("flower") do
      press_button("flower")
      press_first_call_button("flower")
    end
  end

set interruptible_actions, ["play_tile", "draw", "call", "self_call", "upgrade_call"]
set initial_score, 0
set starting_tiles, 13
set max_rounds, 16

# mods
define_mod_category "Rules"
define_mod hk_three_point_minimum, name: "Three Fan Minimum", desc: "Only allow wins worth 3+ fan."
define_mod seven_flower_win, name: "Seven Flower Win", conflicts: ["remove_flowers"], desc: "Allow instant win upon obtaining 7+ flowers."
define_mod hk_flowers_open_hand, name: "Flowers Open Hand", desc: "A hand with flowers declared cannot earn 1 fan from Concealed Hand."
define_mod remove_flowers, name: "Remove Flowers", conflicts: ["seven_flower_win"], desc: "Remove all eight flowers from the wall."
define_mod head_bump, name: "Head Bump", desc: "Enable head bump. In case of multiple hu, only the person closest in turn order gets the win."
define_mod hk_seven_pairs, name: "Seven Pairs", desc: "Add seven pairs as a possible winning hand, worth 4 fan."
define_mod hk_everyone_pays, name: "Everyone Pays On Discard", desc: "Discarder pays 2x hand value, other players pay 1x."

define_mod_category "Other"
define_mod show_waits, name: "Show Waits", desc: "Add some UI that shows waits."
define_mod open_hands, name: "Open Hands", desc: "Everyone plays with tiles shown."

set default_mods, ["hk_three_point_minimum", "seven_flower_win", "show_waits"]
